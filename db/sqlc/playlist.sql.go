// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: playlist.sql

package db

import (
	"context"
	"time"

	null "gopkg.in/guregu/null.v4"
)

const createPlaylist = `-- name: CreatePlaylist :one
INSERT INTO playlists (
  name,
  description,
  image_url,
  is_public,
  delivery_day,
  category
) 
VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, name, description, image_url, is_public, delivery_day, category, created_at, added_at
`

type CreatePlaylistParams struct {
	Name        string      `json:"name"`
	Description null.String `json:"description"`
	ImageUrl    null.String `json:"image_url"`
	IsPublic    bool        `json:"is_public"`
	DeliveryDay null.String `json:"delivery_day"`
	Category    null.String `json:"category"`
}

func (q *Queries) CreatePlaylist(ctx context.Context, arg CreatePlaylistParams) (Playlist, error) {
	row := q.db.QueryRowContext(ctx, createPlaylist,
		arg.Name,
		arg.Description,
		arg.ImageUrl,
		arg.IsPublic,
		arg.DeliveryDay,
		arg.Category,
	)
	var i Playlist
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ImageUrl,
		&i.IsPublic,
		&i.DeliveryDay,
		&i.Category,
		&i.CreatedAt,
		&i.AddedAt,
	)
	return i, err
}

const deletePlaylist = `-- name: DeletePlaylist :exec
DELETE FROM playlists
WHERE id = $1
`

func (q *Queries) DeletePlaylist(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePlaylist, id)
	return err
}

const getPlaylist = `-- name: GetPlaylist :one
SELECT id, name, description, image_url, is_public, delivery_day, category, created_at, added_at FROM playlists
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPlaylist(ctx context.Context, id int64) (Playlist, error) {
	row := q.db.QueryRowContext(ctx, getPlaylist, id)
	var i Playlist
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ImageUrl,
		&i.IsPublic,
		&i.DeliveryDay,
		&i.Category,
		&i.CreatedAt,
		&i.AddedAt,
	)
	return i, err
}

const listPlaylists = `-- name: ListPlaylists :many
SELECT id, name, description, image_url, is_public, delivery_day, category, created_at, added_at FROM playlists
WHERE id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListPlaylistsParams struct {
	ID     int64 `json:"id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPlaylists(ctx context.Context, arg ListPlaylistsParams) ([]Playlist, error) {
	rows, err := q.db.QueryContext(ctx, listPlaylists, arg.ID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Playlist{}
	for rows.Next() {
		var i Playlist
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.ImageUrl,
			&i.IsPublic,
			&i.DeliveryDay,
			&i.Category,
			&i.CreatedAt,
			&i.AddedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePlaylist = `-- name: UpdatePlaylist :one
UPDATE playlists
SET 
  name = $2,
  description = $3,
  image_url = $4,
  is_public = $5,
  delivery_day = $6,
  category = $7,
  added_at = $8
WHERE 
  id = $1
RETURNING id, name, description, image_url, is_public, delivery_day, category, created_at, added_at
`

type UpdatePlaylistParams struct {
	ID          int64       `json:"id"`
	Name        string      `json:"name"`
	Description null.String `json:"description"`
	ImageUrl    null.String `json:"image_url"`
	IsPublic    bool        `json:"is_public"`
	DeliveryDay null.String `json:"delivery_day"`
	Category    null.String `json:"category"`
	AddedAt     time.Time   `json:"added_at"`
}

func (q *Queries) UpdatePlaylist(ctx context.Context, arg UpdatePlaylistParams) (Playlist, error) {
	row := q.db.QueryRowContext(ctx, updatePlaylist,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.ImageUrl,
		arg.IsPublic,
		arg.DeliveryDay,
		arg.Category,
		arg.AddedAt,
	)
	var i Playlist
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ImageUrl,
		&i.IsPublic,
		&i.DeliveryDay,
		&i.Category,
		&i.CreatedAt,
		&i.AddedAt,
	)
	return i, err
}
