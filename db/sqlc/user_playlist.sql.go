// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: user_playlist.sql

package db

import (
	"context"

	null "gopkg.in/guregu/null.v4"
)

const createUser_Playlist = `-- name: CreateUser_Playlist :one
INSERT INTO user_playlists (
  user_id,
  playlist_id,
  delivery_day,
  delivery_time,
  status
) 
VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, user_id, playlist_id, delivery_day, delivery_time, status
`

type CreateUser_PlaylistParams struct {
	UserID       int64       `json:"user_id"`
	PlaylistID   int64       `json:"playlist_id"`
	DeliveryDay  null.String `json:"delivery_day"`
	DeliveryTime null.Time   `json:"delivery_time"`
	Status       null.String `json:"status"`
}

func (q *Queries) CreateUser_Playlist(ctx context.Context, arg CreateUser_PlaylistParams) (UserPlaylist, error) {
	row := q.db.QueryRowContext(ctx, createUser_Playlist,
		arg.UserID,
		arg.PlaylistID,
		arg.DeliveryDay,
		arg.DeliveryTime,
		arg.Status,
	)
	var i UserPlaylist
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PlaylistID,
		&i.DeliveryDay,
		&i.DeliveryTime,
		&i.Status,
	)
	return i, err
}

const deleteUser_Playlist = `-- name: DeleteUser_Playlist :exec
DELETE FROM user_playlists
WHERE id = $1
`

func (q *Queries) DeleteUser_Playlist(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser_Playlist, id)
	return err
}

const getUser_Playlist = `-- name: GetUser_Playlist :one
SELECT id, user_id, playlist_id, delivery_day, delivery_time, status FROM user_playlists
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser_Playlist(ctx context.Context, id int64) (UserPlaylist, error) {
	row := q.db.QueryRowContext(ctx, getUser_Playlist, id)
	var i UserPlaylist
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PlaylistID,
		&i.DeliveryDay,
		&i.DeliveryTime,
		&i.Status,
	)
	return i, err
}

const listUser_Playlists = `-- name: ListUser_Playlists :many
SELECT id, user_id, playlist_id, delivery_day, delivery_time, status FROM user_playlists
WHERE user_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListUser_PlaylistsParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUser_Playlists(ctx context.Context, arg ListUser_PlaylistsParams) ([]UserPlaylist, error) {
	rows, err := q.db.QueryContext(ctx, listUser_Playlists, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserPlaylist{}
	for rows.Next() {
		var i UserPlaylist
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.PlaylistID,
			&i.DeliveryDay,
			&i.DeliveryTime,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser_Playlist = `-- name: UpdateUser_Playlist :one
UPDATE user_playlists
SET 
  user_id = $2,
  playlist_id = $3,
  delivery_day = $4,
  delivery_time = $5,
  status = $6
WHERE 
  id = $1
RETURNING id, user_id, playlist_id, delivery_day, delivery_time, status
`

type UpdateUser_PlaylistParams struct {
	ID           int64       `json:"id"`
	UserID       int64       `json:"user_id"`
	PlaylistID   int64       `json:"playlist_id"`
	DeliveryDay  null.String `json:"delivery_day"`
	DeliveryTime null.Time   `json:"delivery_time"`
	Status       null.String `json:"status"`
}

func (q *Queries) UpdateUser_Playlist(ctx context.Context, arg UpdateUser_PlaylistParams) (UserPlaylist, error) {
	row := q.db.QueryRowContext(ctx, updateUser_Playlist,
		arg.ID,
		arg.UserID,
		arg.PlaylistID,
		arg.DeliveryDay,
		arg.DeliveryTime,
		arg.Status,
	)
	var i UserPlaylist
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PlaylistID,
		&i.DeliveryDay,
		&i.DeliveryTime,
		&i.Status,
	)
	return i, err
}
