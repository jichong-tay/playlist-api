// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: playlist_restuarant_item.sql

package db

import (
	"context"
	"database/sql"
)

const createPlaylist_Restaurant_Item = `-- name: CreatePlaylist_Restaurant_Item :one
INSERT INTO playlist_restaurant_items (
  playlist_id,
  restaurant_item_id,
  restaurant_item_quantity,
  added_at
) 
VALUES (
  $1, $2, $3, $4
)
RETURNING id, playlist_id, restaurant_item_id, restaurant_item_quantity, added_at
`

type CreatePlaylist_Restaurant_ItemParams struct {
	PlaylistID             sql.NullInt32 `json:"playlist_id"`
	RestaurantItemID       sql.NullInt32 `json:"restaurant_item_id"`
	RestaurantItemQuantity sql.NullInt32 `json:"restaurant_item_quantity"`
	AddedAt                sql.NullTime  `json:"added_at"`
}

func (q *Queries) CreatePlaylist_Restaurant_Item(ctx context.Context, arg CreatePlaylist_Restaurant_ItemParams) (PlaylistRestaurantItem, error) {
	row := q.db.QueryRowContext(ctx, createPlaylist_Restaurant_Item,
		arg.PlaylistID,
		arg.RestaurantItemID,
		arg.RestaurantItemQuantity,
		arg.AddedAt,
	)
	var i PlaylistRestaurantItem
	err := row.Scan(
		&i.ID,
		&i.PlaylistID,
		&i.RestaurantItemID,
		&i.RestaurantItemQuantity,
		&i.AddedAt,
	)
	return i, err
}

const deletePlaylist_Restaurant_Item = `-- name: DeletePlaylist_Restaurant_Item :exec
DELETE FROM playlist_restaurant_items
WHERE id = $1
`

func (q *Queries) DeletePlaylist_Restaurant_Item(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePlaylist_Restaurant_Item, id)
	return err
}

const getPlaylist_Restaurant_Item = `-- name: GetPlaylist_Restaurant_Item :one
SELECT id, playlist_id, restaurant_item_id, restaurant_item_quantity, added_at FROM playlist_restaurant_items
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPlaylist_Restaurant_Item(ctx context.Context, id int64) (PlaylistRestaurantItem, error) {
	row := q.db.QueryRowContext(ctx, getPlaylist_Restaurant_Item, id)
	var i PlaylistRestaurantItem
	err := row.Scan(
		&i.ID,
		&i.PlaylistID,
		&i.RestaurantItemID,
		&i.RestaurantItemQuantity,
		&i.AddedAt,
	)
	return i, err
}

const listPlaylist_Restaurant_Items = `-- name: ListPlaylist_Restaurant_Items :many
SELECT id, playlist_id, restaurant_item_id, restaurant_item_quantity, added_at FROM playlist_restaurant_items
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListPlaylist_Restaurant_ItemsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPlaylist_Restaurant_Items(ctx context.Context, arg ListPlaylist_Restaurant_ItemsParams) ([]PlaylistRestaurantItem, error) {
	rows, err := q.db.QueryContext(ctx, listPlaylist_Restaurant_Items, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PlaylistRestaurantItem
	for rows.Next() {
		var i PlaylistRestaurantItem
		if err := rows.Scan(
			&i.ID,
			&i.PlaylistID,
			&i.RestaurantItemID,
			&i.RestaurantItemQuantity,
			&i.AddedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePlaylist_Restaurant_Item = `-- name: UpdatePlaylist_Restaurant_Item :one
UPDATE playlist_restaurant_items
SET 
  playlist_id = $2,
  restaurant_item_id = $3,
  restaurant_item_quantity = $4,
  added_at = $5
WHERE 
  id = $1
RETURNING id, playlist_id, restaurant_item_id, restaurant_item_quantity, added_at
`

type UpdatePlaylist_Restaurant_ItemParams struct {
	ID                     int64         `json:"id"`
	PlaylistID             sql.NullInt32 `json:"playlist_id"`
	RestaurantItemID       sql.NullInt32 `json:"restaurant_item_id"`
	RestaurantItemQuantity sql.NullInt32 `json:"restaurant_item_quantity"`
	AddedAt                sql.NullTime  `json:"added_at"`
}

func (q *Queries) UpdatePlaylist_Restaurant_Item(ctx context.Context, arg UpdatePlaylist_Restaurant_ItemParams) (PlaylistRestaurantItem, error) {
	row := q.db.QueryRowContext(ctx, updatePlaylist_Restaurant_Item,
		arg.ID,
		arg.PlaylistID,
		arg.RestaurantItemID,
		arg.RestaurantItemQuantity,
		arg.AddedAt,
	)
	var i PlaylistRestaurantItem
	err := row.Scan(
		&i.ID,
		&i.PlaylistID,
		&i.RestaurantItemID,
		&i.RestaurantItemQuantity,
		&i.AddedAt,
	)
	return i, err
}
