// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: adhoc.sql

package db

import (
	"context"
)

const listPlaylist_DishesByPlaylistID = `-- name: ListPlaylist_DishesByPlaylistID :many
SELECT id, order_id, playlist_id, dish_id, dish_quantity, created_at, added_at FROM playlist_dishes
WHERE playlist_id = $1
ORDER BY id
`

func (q *Queries) ListPlaylist_DishesByPlaylistID(ctx context.Context, playlistID int64) ([]PlaylistDish, error) {
	rows, err := q.db.QueryContext(ctx, listPlaylist_DishesByPlaylistID, playlistID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PlaylistDish{}
	for rows.Next() {
		var i PlaylistDish
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.PlaylistID,
			&i.DishID,
			&i.DishQuantity,
			&i.CreatedAt,
			&i.AddedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRestaurantNameByDishID = `-- name: ListRestaurantNameByDishID :one
SELECT r.name AS restaurant_name
FROM dishes d
JOIN restaurants r ON d.restaurant_id = r.id
WHERE d.id = $1
`

func (q *Queries) ListRestaurantNameByDishID(ctx context.Context, id int64) (string, error) {
	row := q.db.QueryRowContext(ctx, listRestaurantNameByDishID, id)
	var restaurant_name string
	err := row.Scan(&restaurant_name)
	return restaurant_name, err
}
