// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: restaurant_items.sql

package db

import (
	"context"
	"database/sql"
)

const createRestaurant_Item = `-- name: CreateRestaurant_Item :one
INSERT INTO restaurant_items (
  restaurant_id,
  is_available,
  name,
  description,
  price,
  cuisine,
  image_url
) 
VALUES (
  $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, restaurant_id, is_available, name, description, price, cuisine, image_url
`

type CreateRestaurant_ItemParams struct {
	RestaurantID sql.NullInt32  `json:"restaurant_id"`
	IsAvailable  sql.NullBool   `json:"is_available"`
	Name         sql.NullString `json:"name"`
	Description  sql.NullString `json:"description"`
	Price        sql.NullString `json:"price"`
	Cuisine      sql.NullString `json:"cuisine"`
	ImageUrl     sql.NullString `json:"image_url"`
}

func (q *Queries) CreateRestaurant_Item(ctx context.Context, arg CreateRestaurant_ItemParams) (RestaurantItem, error) {
	row := q.db.QueryRowContext(ctx, createRestaurant_Item,
		arg.RestaurantID,
		arg.IsAvailable,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.Cuisine,
		arg.ImageUrl,
	)
	var i RestaurantItem
	err := row.Scan(
		&i.ID,
		&i.RestaurantID,
		&i.IsAvailable,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Cuisine,
		&i.ImageUrl,
	)
	return i, err
}

const deleteRestaurant_Item = `-- name: DeleteRestaurant_Item :exec
DELETE FROM restaurant_items
WHERE id = $1
`

func (q *Queries) DeleteRestaurant_Item(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteRestaurant_Item, id)
	return err
}

const getRestaurant_Item = `-- name: GetRestaurant_Item :one
SELECT id, restaurant_id, is_available, name, description, price, cuisine, image_url FROM restaurant_items
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRestaurant_Item(ctx context.Context, id int64) (RestaurantItem, error) {
	row := q.db.QueryRowContext(ctx, getRestaurant_Item, id)
	var i RestaurantItem
	err := row.Scan(
		&i.ID,
		&i.RestaurantID,
		&i.IsAvailable,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Cuisine,
		&i.ImageUrl,
	)
	return i, err
}

const listRestaurant_Items = `-- name: ListRestaurant_Items :many
SELECT id, restaurant_id, is_available, name, description, price, cuisine, image_url FROM restaurant_items
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListRestaurant_ItemsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListRestaurant_Items(ctx context.Context, arg ListRestaurant_ItemsParams) ([]RestaurantItem, error) {
	rows, err := q.db.QueryContext(ctx, listRestaurant_Items, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RestaurantItem
	for rows.Next() {
		var i RestaurantItem
		if err := rows.Scan(
			&i.ID,
			&i.RestaurantID,
			&i.IsAvailable,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Cuisine,
			&i.ImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRestaurant_Item = `-- name: UpdateRestaurant_Item :one
UPDATE restaurant_items
SET 
  restaurant_id = $2,
  is_available = $3,
  name = $4,
  description = $5,
  price = $6,
  cuisine = $7,
  image_url = $8
WHERE 
  id = $1
RETURNING id, restaurant_id, is_available, name, description, price, cuisine, image_url
`

type UpdateRestaurant_ItemParams struct {
	ID           int64          `json:"id"`
	RestaurantID sql.NullInt32  `json:"restaurant_id"`
	IsAvailable  sql.NullBool   `json:"is_available"`
	Name         sql.NullString `json:"name"`
	Description  sql.NullString `json:"description"`
	Price        sql.NullString `json:"price"`
	Cuisine      sql.NullString `json:"cuisine"`
	ImageUrl     sql.NullString `json:"image_url"`
}

func (q *Queries) UpdateRestaurant_Item(ctx context.Context, arg UpdateRestaurant_ItemParams) (RestaurantItem, error) {
	row := q.db.QueryRowContext(ctx, updateRestaurant_Item,
		arg.ID,
		arg.RestaurantID,
		arg.IsAvailable,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.Cuisine,
		arg.ImageUrl,
	)
	var i RestaurantItem
	err := row.Scan(
		&i.ID,
		&i.RestaurantID,
		&i.IsAvailable,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Cuisine,
		&i.ImageUrl,
	)
	return i, err
}
