// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: playlist_dishes.sql

package db

import (
	"context"
	"time"
)

const createPlaylist_Dish = `-- name: CreatePlaylist_Dish :one
INSERT INTO playlist_dishes (
  order_id,
  playlist_id,
  dish_id,
  dish_quantity
) 
VALUES (
  $1, $2, $3, $4
)
RETURNING id, order_id, playlist_id, dish_id, dish_quantity, created_at, added_at
`

type CreatePlaylist_DishParams struct {
	OrderID      int64 `json:"order_id"`
	PlaylistID   int64 `json:"playlist_id"`
	DishID       int64 `json:"dish_id"`
	DishQuantity int64 `json:"dish_quantity"`
}

func (q *Queries) CreatePlaylist_Dish(ctx context.Context, arg CreatePlaylist_DishParams) (PlaylistDish, error) {
	row := q.db.QueryRowContext(ctx, createPlaylist_Dish,
		arg.OrderID,
		arg.PlaylistID,
		arg.DishID,
		arg.DishQuantity,
	)
	var i PlaylistDish
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.PlaylistID,
		&i.DishID,
		&i.DishQuantity,
		&i.CreatedAt,
		&i.AddedAt,
	)
	return i, err
}

const deletePlaylist_Dish = `-- name: DeletePlaylist_Dish :exec
DELETE FROM playlist_dishes
WHERE id = $1
`

func (q *Queries) DeletePlaylist_Dish(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePlaylist_Dish, id)
	return err
}

const getPlaylist_Dish = `-- name: GetPlaylist_Dish :one
SELECT id, order_id, playlist_id, dish_id, dish_quantity, created_at, added_at FROM playlist_dishes
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPlaylist_Dish(ctx context.Context, id int64) (PlaylistDish, error) {
	row := q.db.QueryRowContext(ctx, getPlaylist_Dish, id)
	var i PlaylistDish
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.PlaylistID,
		&i.DishID,
		&i.DishQuantity,
		&i.CreatedAt,
		&i.AddedAt,
	)
	return i, err
}

const listPlaylist_Dishes = `-- name: ListPlaylist_Dishes :many
SELECT id, order_id, playlist_id, dish_id, dish_quantity, created_at, added_at FROM playlist_dishes
WHERE id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListPlaylist_DishesParams struct {
	ID     int64 `json:"id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPlaylist_Dishes(ctx context.Context, arg ListPlaylist_DishesParams) ([]PlaylistDish, error) {
	rows, err := q.db.QueryContext(ctx, listPlaylist_Dishes, arg.ID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PlaylistDish{}
	for rows.Next() {
		var i PlaylistDish
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.PlaylistID,
			&i.DishID,
			&i.DishQuantity,
			&i.CreatedAt,
			&i.AddedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePlaylist_Dish = `-- name: UpdatePlaylist_Dish :one
UPDATE playlist_dishes
SET 
  order_id = $2,
  playlist_id = $3,
  dish_id = $4,
  dish_quantity = $5,
  added_at = $6
WHERE 
  id = $1
RETURNING id, order_id, playlist_id, dish_id, dish_quantity, created_at, added_at
`

type UpdatePlaylist_DishParams struct {
	ID           int64     `json:"id"`
	OrderID      int64     `json:"order_id"`
	PlaylistID   int64     `json:"playlist_id"`
	DishID       int64     `json:"dish_id"`
	DishQuantity int64     `json:"dish_quantity"`
	AddedAt      time.Time `json:"added_at"`
}

func (q *Queries) UpdatePlaylist_Dish(ctx context.Context, arg UpdatePlaylist_DishParams) (PlaylistDish, error) {
	row := q.db.QueryRowContext(ctx, updatePlaylist_Dish,
		arg.ID,
		arg.OrderID,
		arg.PlaylistID,
		arg.DishID,
		arg.DishQuantity,
		arg.AddedAt,
	)
	var i PlaylistDish
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.PlaylistID,
		&i.DishID,
		&i.DishQuantity,
		&i.CreatedAt,
		&i.AddedAt,
	)
	return i, err
}
